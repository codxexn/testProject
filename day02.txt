복습 -> pull, push -> 브랜치 -> GUI

0.복습
Git과 Git-Hub
   Git    분산형 버전관리시스템
      커맨드라인도구로 git 모든 기능을 사용할 수 있으며
      GUI 클라이언트 제공되고있음

   GitHub   Git기반의 웹 호스팅 플랫폼
      git 레포지토리를 호스팅하고 웹 인터페이스를 통해 프로젝트를 관리하고 협업할 수 있게함
   
   => Git은 소스코드의 버전관리를 위한 분산형 버전관리시스템
   GitHub는 Git 레포지토리를 호스팅하고 협업을 지원하는 웹 플랫폼입니다
   
Git 구조
   3가지 영역으로 나뉘며 각 영역에 순차적으로 파일을 올려줘야한다

1) Working Directory(작업폴더, 깃 저장소)
   설정하게 되면 해당 폴더에 .git 폴더가 생긴다
   - 파일의 상태
   git의 관리대상이 아니다
   관리대상이 아닌 파일을 untracked 상태

2) Staging Area(스테이징 영역)
   git의 관리 대상이다
   - 파일의 상태
   관리 대상 파일 tracked(추적)상태
      unmodified : 수정이 되지 않은 상태
      modified : 스테이징 영역에 들어온 파일 중 수정된 상태
      staged : 로컬 저장소에 올릴 준비가 완료된 상태

3) Local Repository(로컬 저장소)
   스테이징 영역에서 staged 상태의 파일을 commit하면 로컬저장소에 저장된다


- git 명령어
git config --global (user.name, user.email 등록할 때)
git config --global --unset (user.name, user.email 삭제할 때)
git config --list (설정 내용 확인)
git init (.git 생성)
git status (깃 저장소에 있는 파일들의 상태 확인)
git add 파일명 (혹은 .) (작업 폴더의 파일을 스테이징 시킨다, 수정된 파일은 staged 상태로 만들기 위해 사용한다.)
git rm --cached 파일명 (add로 스테이징 시킨 파일을 스테이징 영역에서 내보낸다.)
git commit -m "메시지" (스테이징 영역의 파일들의 변경사항을 확정짓고 새로운 버전을 로컬 저장소에 저장한다.)
git commit --amend (방금 전에 커밋한 메시지를 수정하는 명령어(vim 편집기))
			일반 모드 -> 기본 상태
				i or a  -> 편집모드 변경
				esc + : -> 명령모드 변경
			명령모드 -> esc : w q
			입력모드 -> 수정내용을 작성할 수 있다(하단에 insert)
				i, a, o

git branch (현재 로컬의 브런치를 확인(git-hub 브런치가 main))
git branch -m master main (브런치명 변경)
git branch -d "브런치명" 브런치 삭제

git remote add 원격저장소이름 url주소 (원격저장소를 로컬과 연결하는 명령어)
git remote -v (원격저장소와 로컬저장소가 연결이 잘 되었는지 확인)


git 시점 되돌리기
	git은 commit한 시점으로 돌아갈 수 있다.
	
git log
	git은 저장된 commit 기록을 볼 수 있다.
	가장 최근 commit부터 상단에 출력된다.
	출력결과의 commit 뒤에 붙은 16진수 해시코드는 해당 commit id 또는 체크섬이라고 부른다.

	author: 수정자
	date: 수정일자

git log --pretty=oneline
	커밋 기록을 출력할 때 옵션을 주면 한줄로 확인 가능
	(체크섬, 커밋메시지 등)

git checkout 체크섬 or 브랜치 이름 or -
	원하는 시점으로 이동하는 명령어이다.
	log를 통해 확인한 체크섬을 복붙하거나 앞 7자리만 입력하면 해당 시점으로 이동한다.
	체크섬 대신 -를 사용하면 가장 최근 커밋으로 돌아간다.

브랜치(branch)
	한개의 저장소르 여러 갈래로 나누어 관리할 수 있게 해주는 개념
	브랜치끼리는 서로 영향을 받지 않기 때문에 개별적인 작업을 진행할 수 있다.
	git은 기본적으로 master 브랜치를 메인으로 사용한다.


원격 저장소에 저장한 파일들을 로컬 저장소 가져올 때 발생하는 에러

[에러내용] fatal: refusing to merge unrelated histories
[발생이유] 로컬저장소와 원격저장소 간에 서로 다른 히스토리를 갖고 있을 때 발생한다
   1) 빈 저장소에서 git init 명령어를 사용하여 새로운 저장소를 만들었을때
   2) 로컬 저장소를 초기화하고 리모트 저장소를 추가한 후에 리모트 저장소에서 변경사항을 가져올 때
[해결방안] git pull origin main --allow-unrelated-histories
   * 이 작업 수행하기 전에 현재의 변경 내용을 백업

로컬 저장소에 커밋한 파일들을 원격저장소로 올릴 때 발생하는 에러

[에러내용] remote: Permission to korea-itsun/testProject.git denied to dev-tedhan.
fatal: unable to access 'https://github.com/korea-itsun/testProject.git/': The requested URL returned error: 403
[발생이유] 다른 git과 자격증명이 겹칠 때 찾지 못해서 발생한다
[해결방안] 자격 증명 관리자에 있는 git-hub 관련 내용 삭제하기


git clone 원격저장소주소 저장할 경로
	원격 저장소에 있는 파일들을 복사하여 로컬 저장소로 가져오는 명령어
	다른 사람이 서버에 올려놓은 git저장소를 내 컴퓨터에 똑같이 복사해오는 용도로 사용한다.
	보통 처음 세팅을 할 때 사용한다.
	
	* 주의사항: 클론을 할 때는 git init을 하지 않는다.
		git init은 내 로컬에서 .git 폴더를 만들고 처음부터 관리하는 것이고
		clone은 다른 사람들이 작성한 파일들을 한 번에 다운 받는 것






















			